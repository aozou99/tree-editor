'use client';

import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Search, Smile } from 'lucide-react';

// ÁµµÊñáÂ≠ó„Ç´„ÉÜ„Ç¥„É™„Éº
const emojiCategories = [
    {
        id: 'faces',
        name: 'È°î',
        emojis: ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò'],
    },
    {
        id: 'people',
        name: '‰∫∫Áâ©',
        emojis: ['üë∂', 'üëß', 'üßí', 'üë¶', 'üë©', 'üßë', 'üë®', 'üëµ', 'üßì', 'üë¥', 'üë≤', 'üë≥‚Äç‚ôÄÔ∏è', 'üë≥‚Äç‚ôÇÔ∏è', 'üßï', 'üëÆ‚Äç‚ôÄÔ∏è', 'üëÆ‚Äç‚ôÇÔ∏è'],
    },
    {
        id: 'animals',
        name: 'ÂãïÁâ©',
        emojis: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üêî', 'üêß'],
    },
    {
        id: 'food',
        name: 'È£ü„ÅπÁâ©',
        emojis: ['üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'ü•ë'],
    },
    {
        id: 'activities',
        name: 'Ê¥ªÂãï',
        emojis: ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', 'ü•Ö'],
    },
    {
        id: 'travel',
        name: 'ÊóÖË°å',
        emojis: ['üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèé', 'üöì', 'üöë', 'üöí', 'üöê', 'üöö', 'üöõ', 'üöú', 'üõ¥', 'üö≤', 'üõµ', 'üèç'],
    },
    {
        id: 'objects',
        name: 'Áâ©',
        emojis: ['‚åö', 'üì±', 'üì≤', 'üíª', '‚å®', 'üñ•', 'üñ®', 'üñ±', 'üñ≤', 'üïπ', 'üóú', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑'],
    },
    {
        id: 'symbols',
        name: 'Ë®òÂè∑',
        emojis: ['‚ù§', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'üíî', '‚ù£', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü'],
    },
    {
        id: 'flags',
        name: 'Êóó',
        emojis: ['üè≥', 'üè¥', 'üèÅ', 'üö©', 'üè≥Ô∏è‚Äçüåà', 'üè≥Ô∏è‚Äç‚ößÔ∏è', 'üá¶üá´', 'üá¶üáΩ', 'üá¶üá±', 'üá©üáø', 'üá¶üá∏', 'üá¶üá©', 'üá¶üá¥', 'üá¶üáÆ', 'üá¶üá∂'],
    },
    {
        id: 'folders',
        name: '„Éï„Ç©„É´„ÉÄ',
        emojis: ['üìÅ', 'üìÇ', 'üóÇÔ∏è', 'üìã', 'üìë', 'üóÑÔ∏è', 'üìä', 'üìà', 'üìâ', 'üìá', 'üìå', 'üìç', 'üìé', 'üñáÔ∏è', 'üìè', 'üìê', '‚úÇÔ∏è'],
    },
    {
        id: 'documents',
        name: 'Êõ∏È°û',
        emojis: ['üìù', 'üìÑ', 'üìÉ', 'üìú', 'üì∞', 'üóûÔ∏è', 'üìë', 'üîñ', 'üè∑Ô∏è', 'üíº', 'üìÅ', 'üìÇ', 'üóÇÔ∏è', 'üìÖ', 'üìÜ', 'üóìÔ∏è', 'üìá'],
    },
];

interface EmojiPickerProps {
    onEmojiSelect: (emoji: string) => void;
    currentEmoji?: string;
    disabled?: boolean;
}

export function EmojiPicker({ onEmojiSelect, currentEmoji, disabled = false }: EmojiPickerProps) {
    const [isOpen, setIsOpen] = useState(false);
    const [searchQuery, setSearchQuery] = useState('');
    const [filteredEmojis, setFilteredEmojis] = useState<string[]>([]);
    const [activeCategory, setActiveCategory] = useState('faces');
    const inputRef = useRef<HTMLInputElement>(null);
    const modalRef = useRef<HTMLDivElement>(null);

    // Ê§úÁ¥¢„ÇØ„Ç®„É™„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç„Å´ÁµµÊñáÂ≠ó„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    useEffect(() => {
        if (!searchQuery) {
            setFilteredEmojis([]);
            return;
        }

        const query = searchQuery.toLowerCase();
        const results: string[] = [];

        emojiCategories.forEach((category) => {
            category.emojis.forEach((emoji) => {
                if (results.length < 50 && !results.includes(emoji)) {
                    results.push(emoji);
                }
            });
        });

        setFilteredEmojis(results);
    }, [searchQuery]);

    // ÁµµÊñáÂ≠ó„ÇíÈÅ∏Êäû„Åó„Åü„Å®„Åç„ÅÆÂá¶ÁêÜ
    const handleEmojiSelect = (emoji: string) => {
        onEmojiSelect(emoji);
        setIsOpen(false);
        setSearchQuery('');
    };

    // „É¢„Éº„ÉÄ„É´„ÅÆÂ§ñÂÅ¥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åü„Å®„Åç„Å´Èñâ„Åò„Çã
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
                setIsOpen(false);
            }
        };

        if (isOpen) {
            document.addEventListener('mousedown', handleClickOutside);
        }

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [isOpen]);

    // „Ç¢„Ç§„Ç≥„É≥„ÅåÁîªÂÉèURL„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
    const isIconUrl = (icon?: string) => {
        return icon?.startsWith('http');
    };

    return (
        <div className='relative'>
            <Button
                variant='outline'
                size='icon'
                className='h-10 w-10'
                onClick={() => setIsOpen(!isOpen)}
                title='ÁµµÊñáÂ≠ó„ÇíÈÅ∏Êäû'
                disabled={disabled}
            >
                <Smile size={18} />
            </Button>

            {isOpen && (
                <div
                    ref={modalRef}
                    className='absolute z-50 top-full right-0 mt-1 w-80 bg-white border rounded-md shadow-md'
                >
                    <div className='p-2 border-b'>
                        <div className='relative'>
                            <Search className='absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground' />
                            <Input
                                ref={inputRef}
                                placeholder='ÁµµÊñáÂ≠ó„ÇíÊ§úÁ¥¢...'
                                className='pl-8'
                                value={searchQuery}
                                onChange={(e) => setSearchQuery(e.target.value)}
                                autoFocus
                            />
                        </div>
                    </div>

                    {searchQuery ? (
                        <ScrollArea className='h-60 p-2'>
                            <div className='grid grid-cols-8 gap-1'>
                                {filteredEmojis.map((emoji, index) => (
                                    <Button
                                        key={`search-${index}`}
                                        variant='ghost'
                                        className='h-8 w-8 p-0 text-lg'
                                        onClick={() => handleEmojiSelect(emoji)}
                                    >
                                        {emoji}
                                    </Button>
                                ))}
                            </div>
                            {filteredEmojis.length === 0 && (
                                <div className='text-center py-4 text-sm text-muted-foreground'>
                                    ÁµµÊñáÂ≠ó„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì
                                </div>
                            )}
                        </ScrollArea>
                    ) : (
                        <div>
                            <div className='border-b overflow-x-auto'>
                                <div className='flex p-1'>
                                    {emojiCategories.map((category) => (
                                        <Button
                                            key={category.id}
                                            variant={activeCategory === category.id ? 'default' : 'ghost'}
                                            className='text-xs px-2 py-1 h-7'
                                            onClick={() => setActiveCategory(category.id)}
                                        >
                                            {category.name}
                                        </Button>
                                    ))}
                                </div>
                            </div>
                            <ScrollArea className='h-60 p-2'>
                                <div className='grid grid-cols-8 gap-1'>
                                    {emojiCategories
                                        .find((category) => category.id === activeCategory)
                                        ?.emojis.map((emoji, index) => (
                                            <Button
                                                key={`${activeCategory}-${index}`}
                                                variant='ghost'
                                                className='h-8 w-8 p-0 text-lg'
                                                onClick={() => handleEmojiSelect(emoji)}
                                            >
                                                {emoji}
                                            </Button>
                                        ))}
                                </div>
                            </ScrollArea>
                        </div>
                    )}

                    <div className='p-2 border-t flex justify-between items-center'>
                        <div className='text-xs text-muted-foreground'>ÁµµÊñáÂ≠ó„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</div>
                        <Button variant='ghost' size='sm' onClick={() => setIsOpen(false)}>
                            „Ç≠„É£„É≥„Çª„É´
                        </Button>
                    </div>
                </div>
            )}
        </div>
    );
}
